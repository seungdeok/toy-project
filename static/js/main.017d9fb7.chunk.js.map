{"version":3,"sources":["components/Navigation.js","initFirebase.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/AuthForm.js","routes/Auth.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["Navigation","userInfo","to","displayName","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","firebaseAuth","auth","firebaseDatabase","firestore","firebaseStorage","storage","Tweet","tweetInfo","isOwner","useState","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","a","window","confirm","collection","doc","id","delete","refFromURL","fileUrl","toggleEditing","prev","onSubmit","event","preventDefault","update","type","placeholder","value","required","onChange","target","onClick","src","width","height","TweetFactory","tweet","setTweet","file","setFile","ref","child","uid","uuidv4","fileRef","putString","response","getDownloadURL","tweetObj","createdAt","Date","now","creatorId","add","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","data","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","console","log","message","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","onLogOutClick","signOut","push","updateProfile","getTweets","where","orderBy","get","RootRouter","isLoggedIn","exact","path","App","init","setInit","setIsLoggedIn","setUserInfo","onAuthStateChanged","user","args","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.017d9fb7.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navigation = ({ userInfo }) => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to='/'>Home</Link>\n        </li>\n        <li>\n          <Link to='/profile'>{userInfo.displayName}의 프로필</Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navigation;","import firebase from \"firebase/app\";\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const firebaseAuth = firebase.auth();\nexport const firebaseDatabase = firebase.firestore();\nexport const firebaseStorage = firebase.storage();","import { firebaseDatabase, firebaseStorage } from 'initFirebase';\nimport React, { useState } from 'react';\n\nconst Tweet = ({ tweetInfo, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newTweet, setNewTweet] = useState(tweetInfo.text);\n\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\n\n    if(ok) {\n      await firebaseDatabase.collection('tweets').doc(`${tweetInfo.id}`).delete();\n      await firebaseStorage.refFromURL(tweetInfo.fileUrl).delete();\n    }\n  };\n\n  const toggleEditing = () => setEditing((prev) => !prev);\n\n  const onChange = (event) => {\n    const { target: { value } } = event;\n\n    setNewTweet(value);\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    await firebaseDatabase.collection('tweets').doc(`${tweetInfo.id}`).update({\n      text: newTweet,\n    });\n\n    setEditing(false);\n  }\n  return (\n    <div>\n    {\n      editing ? (\n        <>\n        <form onSubmit={onSubmit}>\n          <input \n            type='text' \n            placeholder='Edit your tweet' \n            value={newTweet} \n            required\n            onChange={onChange} />\n          <input type='submit' value='Update tweet' />\n        </form>\n        <button onClick={toggleEditing}>Cancel</button>\n        </>\n      ) : (\n        <>\n        <h4>{tweetInfo.text}</h4>\n        { tweetInfo.fileUrl && <img src={tweetInfo.fileUrl} width='50px' height='50px' /> }\n        {\n          isOwner && (\n            <>\n            <button onClick={onDeleteClick}>Delete Tweet</button>\n            <button onClick={toggleEditing}>Edit Tweet</button>\n            </>\n          )\n        }\n        </>\n      )\n    }\n    </div>\n  )\n};\n\nexport default Tweet;","import React, { useState } from 'react';\nimport { firebaseDatabase, firebaseStorage } from 'initFirebase';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst TweetFactory = ({ userInfo }) => {\n  const [tweet, setTweet] = useState(\"\");\n  const [file, setFile] = useState();\n\n  const onChange = (event) => {\n    const { target: { value }  } = event;\n\n    setTweet(value);\n  }\n  \n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let fileUrl = \"\";\n    if (file) {\n      const fileRef = await firebaseStorage.ref().child(`${userInfo.uid}/${uuidv4()}`);\n      const response = await fileRef.putString(file, 'data_url');\n      fileUrl = await response.ref.getDownloadURL();\n    }\n\n    const tweetObj = {\n      text: tweet,\n      createdAt: Date.now(),\n      creatorId: userInfo.uid,\n      fileUrl,\n    }\n    await firebaseDatabase.collection('tweets').add(tweetObj);\n\n    setTweet(\"\");\n    setFile(null);\n  }\n\n  const onChangeFile = (event) => {\n    const { target: { files } } = event;\n\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result }\n      } = finishedEvent;\n\n      setFile(result);\n    };\n    reader.readAsDataURL(theFile);\n  }\n\n  const onClearFile = () => setFile(null);\n  return (\n    <form onSubmit={onSubmit}>\n      <input \n        type='text' \n        placeholder='What`s on your mind?' \n        maxLength={120}\n        value={tweet}\n        onChange={onChange} />\n      <input type='file' accept='image/*' onChange={onChangeFile} />\n      <input type='submit' value='Tweet' />\n      { file && (\n        <div>\n          <img src={file} width='50px' height='50px' />\n          <button onClick={onClearFile}>CLEAR</button>\n        </div>\n      ) }\n    </form>\n  )\n}\n\nexport default TweetFactory;","import React, { useEffect, useState } from 'react';\n\nimport { firebaseDatabase } from 'initFirebase';\n\nimport Tweet from 'components/Tweet';\nimport TweetFactory from 'components/TweetFactory';\n\nconst Home = ({ userInfo }) => {\n  const [tweets, setTweets] = useState([]);\n\n  useEffect(() => {\n    firebaseDatabase.collection('tweets').onSnapshot((snapshot) => {\n      const tweetArray = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n      setTweets(tweetArray);\n    });\n  }, []);\n  return (\n    <div>\n      <TweetFactory userInfo={userInfo} />\n      { tweets.map((tweet) => (\n        <Tweet key={tweet.id} tweetInfo={tweet} isOwner={tweet.creatorId === userInfo.uid} />\n      )) }\n    </div>\n  )\n};\nexport default Home;","import React, { useState } from \"react\";\nimport { firebaseAuth } from \"initFirebase\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const onChange = (event) => {\n    const { target: { name, value }  } = event;\n\n    if (name === 'email') {\n      setEmail(value);\n    } else if (name === 'password') {\n      setPassword(value);\n    }\n  }\n  \n  const onSubmit = async (event) => {\n    event.preventDefault(); \n    try {\n      let data;\n      if(newAccount) {\n        data = await firebaseAuth.createUserWithEmailAndPassword(email, password);\n      } else {\n        data = await firebaseAuth.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n    <form onSubmit={onSubmit}>\n      <input\n        name='email'\n        type='text' \n        placeholder='Email' \n        required\n        value={email}\n        onChange={onChange} />\n      <input \n        name='password'\n        type='password' \n        placeholder='Password' \n        required\n        value={password}\n        onChange={onChange} />\n      <input type='submit' value={newAccount ? 'Create Account' : 'LOGIN'} />\n      {error}\n    </form>\n    <span onClick={toggleAccount}>{newAccount ? 'Sign In' : 'Sign Up'}</span>\n    </>\n  )\n};\n\nexport default AuthForm;","import React, { useState } from 'react';\nimport { firebaseAuth, firebaseInstance } from 'initFirebase';\n\nimport AuthForm from 'components/AuthForm';\n\nconst Auth = () => {\n  const onSocialClick = async (event) => {\n    const { target: { name }  } = event;\n    let provider;\n\n    if(name === 'google') {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if(name === 'github') {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n\n    await firebaseAuth.signInWithPopup(provider);\n  }\n\n  return (\n    <div>\n      <AuthForm />\n      <div>\n        <button onClick={onSocialClick} name='google'>Continue with Googld</button>\n        <button onClick={onSocialClick} name='github'>Continue with Github</button>\n      </div>\n    </div>\n  )\n};\nexport default Auth;","import { firebaseAuth, firebaseDatabase } from 'initFirebase';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst Profile = ({ refreshUser, userInfo }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userInfo.displayName);\n\n  const onLogOutClick = async () => {\n    await firebaseAuth.signOut();\n    history.push('/');\n    refreshUser();\n  }\n\n  const onChange = (event) => {\n    const { target: { value } } = event;\n\n    setNewDisplayName(value);\n  } \n\n  const onSubmit =  async (event) => {\n    event.preventDefault();\n\n    if(userInfo.displayName !== newDisplayName) {\n      await userInfo.updateProfile({\n        displayName: newDisplayName,\n      });\n\n      refreshUser();\n    }\n  }\n\n  const getTweets = async () => {\n    const tweets = await firebaseDatabase\n      .collection('tweets')\n      .where('creatorId', '==', userInfo.uid)\n      .orderBy('createdAt', 'desc')\n      .get();\n\n    const data = tweets.docs.map((doc) => doc.data());\n    console.log(data);\n  }\n\n  useEffect(() => {\n    getTweets();\n  }, []);\n  return (\n    <>\n    <form onSubmit={onSubmit}>\n      <input type='text' placeholder='DisplayName' value={newDisplayName} onChange={onChange} />\n      <input type='submit' value='Update Profile' />\n    </form>\n    <button onClick={onLogOutClick}>LOGOUT</button>\n    </>\n  )\n};\nexport default Profile;","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Navigation from 'components/Navigation';\n\nimport Home from 'routes/Home';\nimport Auth from 'routes/Auth';\nimport Profile from 'routes/Profile';\n\nconst RootRouter =  ({ refreshUser, isLoggedIn, userInfo }) => {\n  return (\n    <Router>\n      { isLoggedIn && <Navigation userInfo={userInfo} />}\n      <Switch>\n        {isLoggedIn ? (\n          <>\n          <Route exact path='/'>\n            <Home userInfo={userInfo} />\n          </Route>\n          <Route exact path='/profile'>\n            <Profile refreshUser={refreshUser} userInfo={userInfo} />\n          </Route>\n          </>\n        ) : (\n          <Route exact path='/'>\n            <Auth />\n          </Route>\n        )}\n      </Switch>\n    </Router>\n  )\n}\n\nexport default RootRouter;","import React, { useEffect, useState } from 'react';\nimport RootRouter from 'components/Router';\nimport { firebaseAuth } from 'initFirebase';\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userInfo, setUserInfo] = useState(null);\n\n  useEffect(() => {\n    firebaseAuth.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserInfo({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setIsLoggedIn(false);\n        setUserInfo(null);\n      }\n      setInit(true);\n    })\n  }, []);\n  const refreshUser = () => {\n    const user = firebaseAuth.currentUser;\n    setUserInfo({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  }\n  return (\n    <>\n    { init ? <RootRouter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userInfo={userInfo} /> : 'Initializing...' }\n    <footer>\n      &copy; {new Date().getFullYear()} twitter clone \n    </footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}